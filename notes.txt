install dependencies:
git clone https://github.com/nlohmann/json libs/nlohmann/json
git clone https://github.com/yhirose/cpp-linenoise.git libs/yhirose/cpp-linenoise

build && run:
g++ -std=c++23 src/prompt.cpp -o builds/prompt && builds/prompt

build && deploy:
g++ -std=c++23 src/prompt.cpp -o builds/prompt && \
cp builds/prompt ~/bin/prompt

build && run tests:
g++ -std=c++23 tests/tests.cpp -o builds/tests && builds/tests





    // array_dump(model.options("All the planets of the solar system?"));
    // array_dump(model.options("All the complementer colors?"));

    // vector<string> planets = model.options("All the planets of the solar system?");
    // vector<string> filtered_planets = model.options("Which are gas planets?", planets);
    // int selected_planet = model.choose("Which is the largest?", planets);
    // int selected_filtered_planets = model.choose("Which is the largest?", filtered_planets);

    // cout << "planets:" << endl;
    // array_dump(planets);
    // cout << "selected_planet: " << selected_planet << endl;

    // cout << "filtered_planets:" << endl;
    // array_dump(filtered_planets);
    // cout << "selected_filtered_planets: " << selected_filtered_planets << endl;

    // cout << "summary:" << endl;
    // array_dump(model.options("summarize what just happend step by step"));


    // cout << "!!!!!!!!!!:" << endl;
    // array_dump(model.options("I need a tetris game but this task is complex. To solve the problem, need to break down smaller steps."));
    
    // cout << "--------------------------------------------------" << endl;
    // cout << model.think("How to you calculate the rist revard ratio of an investment and how to improve it?", 3) << endl;
    // cout << "--------------------------------------------------" << endl;
    // cout << model.prompt("Summarize.") << endl;
    // cout << "--------------------------------------------------" << endl;
    // model.amnesia();
    // cout << model.think("(1732.45 * 64438.25) / 34239.34 = ? Answer as precice as possible", 10) << endl;

    // model.solve("5+5=?");

    // model.solve("
    
    // Create a terminal-based text choose your adventure style  multiplayer game. The game should be very simple and minimalistic, with a graph of locations and items, very basic fight system. Simplify every possible technical solutions. Use C++. the basic idea is, server traks the game, players can send commands to interact with the game world. game contains puzzles and quests that can score up the players the last man stands or the best scored player is the winner. the game design is simple, in the bottom line of the terminal an input prompt (cpp-linenoise) and on the screen scrolls up as event happens by other player interactions. players can interact like go/use/take/talk actions and the actions parameters are item/places/players every action a player does, the others in the same room will be notified. I don't need the full implementation, just a simple game design skeleton of classes (be object oriented)
    // once you are done, then dive deeper and create the full source code implementation for server and clients as well. Remember it should be interactive with a non-blocking game loop so that the client users can be notified when a "real-time" event happens. Use simple websocket server/clients custom wrapper library with a chat demo in C++ that works from linux terminal command line (Use the most simplicistic websoket lib, that is header only lightweight, easy to use (e.g wslay or utilize any usefull linux command if are aweare of any) - Do not use Boost library). No need authentication or special errorhandling etc. this will be only a small example/demonstration, focus on simplicity. The client layout is simply a one line user input (no need line editing or text formatting library, just use the standard I/O), when user hits enter the message sent to the server that forwards the message to the other clients. No need any additional info presented on terminal screen for client, this program is just a proof of concept example for communication. Do not use cmake or other build system, only use the g++ command.

    // Create a simple linux terminal based chat app. that use the bottom line for message sending and the screen to print out and scroll the incoming messages. use the minimalistic header only, simple libraris whenever it's possible. for networking the websocket server is preffered, but DO NOT USE BOOST!! keep simple with the libs. for input message you can use cpp-lineoise and for json nholman::json (if needed) - however, if you keep if as simple as possible you may can avoid json at all. - Do not use cmake or other build system, just use g++ command to build the project for now (we have own build system), use header only inlcudes with .hpp extensions

    // Create an arduino application that works as a usb stick but I can store my passowrd on it and act like a keybord, so that I don't have to memorize nor store my password on the computer. I need a cheepest/simplies design, output screen and buttons to manage/generate/delete/use passwords. I really only need an output (number) which password is selected and I can generate and reuse any time. (other settings, like password complexity etc will be through serial monitor but it's out of scope for now, if you have to use config variable just hard-code them in a central place in the code for now) - no need to be secure, it's only a proof-of-concept and wont be used in real life scenarios
    
    // create a step by step development plan for an esp32 usb keyboard emulator for automatic password typing so that I dont have to store my password on the computer and also don't have to keep them in mind. the esp have to store/generate/delete etc. the passwords and when I push a button it just types in like a keyboard. design a project and a main instruction step to create an MVP proof of concept version. Do not create a production ready system just make something that works for testing and for a better understanding what effort would the full project involve. use espressif lib (Do not utilize Arduino related things)

    // Write a simple linux terminal application in python3 that has a server and clients side, the clients can send a websocket text and the server forward each message to the other clients.

    // Write me a simple websocket server/clients custom wrapper library with a chat demo in C++ that works from linux terminal command line (Use the most simplicistic websoket lib, that is header only lightweight, easy to use (e.g wslay or utilize any usefull linux command if are aweare of any) - Do not use Boost library). No need authentication or special errorhandling etc. this will be only a small example/demonstration, focus on simplicity. The client layout is simply a one line user input (no need line editing or text formatting library, just use the standard I/O), when user hits enter the message sent to the server that forwards the message to the other clients. No need any additional info presented on terminal screen for client, this program is just a proof of concept example for communication. Do not use cmake or other build system, only use the g++ command.

    // Write me a simple socket server/clients custom wrapper library with a chat demo in C++ that works from linux terminal command line (Use the most simplicistic socket lib(s) that is header only lightweight, easy to use (or utilize any usefull linux command if you are aweare of any) - Do not use Boost library). No need authentication or special errorhandling etc. this will be only a small example/demonstration, focus on simplicity. The client layout is simply a one line user input (no need line editing or text formatting library, just use the standard I/O), when user hits enter the message sent to the server that forwards the message to the other clients. No need any extre info presented on terminal screen for clients, only show the received message. We need multiple client so I guess the client input should be non-blocking or you will need some sort of thread-management this program is just a proof of concept example for communication. Do not use cmake or other build system, only use the g++ command.

/*
1: 
1: locations are a simple tree (or graph) each location connected with other locations and the user can choose where to go from a list. 2 - A simple system might use string comparisons is how puzzles be defined 3 - Handling disconnections, invalid input, and potential exploits is crucial; 4: mechanism will be used to synchronize game? - simple server - clients broadcast I guess, or the simplest as possible. 5: - libraries or frameworks: minimal libraries, lightweigt, header only libs always prefered - json encoder/decoder we already have implemented, we can re-use that. 6: simple command-line interface - we already has a cpp-linenoise utilized, we can reuse it's wrapper here. 7 - for managing items (inventory, item properties, item interactions): I think classes would be better, we like the object oriented code.

1: player movement and location updates be handled as simple as possible, (erver constantly track and update every player's location I guess). 2: I am not sure What strategies will be used to prevent cheating but my idea is that the users are just sending and receiving simple commands and the server responses and notifies when action happens. everything is managed on the server so the only thing user can not send too many command to the server (ddos prevention, or too many action is taken) so that you can not automate game actions pragmatically to speed up your character for eg, - 3: handle disconnections gracefully: we are developing MVC now, simple soution I think if user disconnect then the game keep it state for a while (configurable) and if the player dont connecting back the "dies/disappear" from the game (which is an other action, close players should be notified by the server) - maybe dead players items are leaving in the location so others can collect. 4 - testing: unit tests are essencial (must), integration tests is a (could), - I don't know what is the system testing you mean? - for now unit testing with simple cassert test will be oke, integration testing also can go with cassert if we emulate a network environment locally, if that is a good idea? - 5: the estimated development: solo dev. --- Note: always choose the more simple soltion in the future, related to anything

------------------
--- Error Handling Depth: lmore basic approach? - any error happens just throw an exception and we will polishing..
--- Concurrency Model (1.1): simpler model (e.g., sequential processing of client requests)
--- Data Structures (1.2 and 1.3): Simple `std::vector`
--- Network Protocol (1.4 and 1.5): simple string or JSON.
--- Testing Strategy (Phase 1): minimal testing first, then more test cases when we find out concrete expectations and bugs
--- Will a mocking framework be used to isolate units under test? - No, so DO NOT USE static or global data but always open the possibility for dependency injection

--- Client-Side Architecture: users should recieve messages from the server to get notified when an action taken or event happens on the server so minimum one extra thread necessary (but I don't see why it would be a big issue)
--- Command Parsing Robustness: simple error messages will suffice (later extends - for testing a simple universal validation error message enough. like "synax error")
--- JSON Data Structure: sumple rest json, {"data":"....."}, or {"error": "....."}
--- Client-Side Update Handling: simply display updates as they arrive. Note. it's just a simpe text game. scroll up the text as it receives while a simple command line sends from the bottom of the screen.
--- Network Latency Considerations: client command messages handled as arrived. eg. two player pick up the same item, first recive a message "item taken to your inventory", second only informed as "There is no item..." (as they are probably in the same location the server sould notify the second anyway, like "X player picked up the Y item." - just almost in the same time, so the second will now he/she wasnt fast enough)
--- Testing Strategy (Phase 2): in this phase a simple unit/integration tests (with minimal localhost server enough)

--- Puzzle Design Specificity && Item Interaction Complexity:: concrete example of the "very simple puzzle" planned for this phase: A user pick up a "key" item and brings it to a location where the exit door is and use it. or, the user collect all the 10 hidden gold. or, users should be able to fight with simple formatted commands like "<action> <item>: <object/player>", for eg "use knife player-xy" just like other items can be used: "use key exit-door" other actions takes other parameters, for eg: "go starways" or "take key" or "drop knife" or some command no need parameters like "search" => and returns "Here is a rope and a knife." etc..
--- Game State Update Mechanics: simple boolean flags. actually what I am planning is the game map contains a certain amount of pussels, each for X score per complexity and the players who get more score until the last puzzle, wins and the game restarts.
--- 

 */


/*
Should the example demonstrate a simple echo server, or a more complex interaction?
A simple echo server (This aligns with the request for a minimalistic example).
What operating system should the example be designed for (e.g., Linux, Windows)?  This impacts socket handling.
POSIX-compliant systems (Linux, macOS, BSD) - This simplifies socket handling and avoids the complexities of Windows sockets.
Should the code include any comments explaining its functionality?
Yes, comments are especially important in this case because the example is simplified and omits many details found in a production-ready WebSocket server.  Comments help clarify what's missing and why.
What is the desired level of code formatting (e.g., use of spaces vs. tabs, consistent indentation)?
Consistent indentation using spaces (e.g., 4 spaces per indentation level). This enhances readability and is generally preferred in C++ code.  It avoids potential issues with tab interpretation across different editors and systems.

> yes
src/prompt.cpp:268 - Current task:
yes
Thinking of a solution... (deep thinking: 2)
This program implements a minimalistic WebSocket echo server using the wslay library.  It handles only one client at a time and includes minimal error handling.  It's designed for POSIX-compliant systems.

```cpp
#include <iostream>
#include <string>
#include <unistd.h> // for close
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <wslay/wslay.h>

// Minimal error handling:  Print to stderr and exit.
void handle_error(const std::string& msg) {
    std::cerr << "Error: " << msg << std::endl;
    exit(1);
}


int main() {
    // Create a socket.
    int sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd < 0) handle_error("Could not create socket");

    // Set up the server address.
    sockaddr_in serv_addr;
    memset(&serv_addr, 0, sizeof(serv_addr));
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_addr.s_addr = INADDR_ANY;
    serv_addr.sin_port = htons(8080); // Choose a port

    // Bind the socket to the address.
    if (bind(sockfd, (sockaddr*)&serv_addr, sizeof(serv_addr)) < 0)
        handle_error("Could not bind socket");

    // Listen for incoming connections.
    if (listen(sockfd, 1) < 0) handle_error("Could not listen on socket");

    // Accept a connection.  Only handles one client at a time.
    sockaddr_in client_addr;
    socklen_t client_len = sizeof(client_addr);
    int client_sockfd = accept(sockfd, (sockaddr*)&client_addr, &client_len);
    if (client_sockfd < 0) handle_error("Could not accept connection");

    //Close listening socket after accepting a client.
    close(sockfd);

    // WebSocket handshake (simplified - missing error handling and full handshake logic).
    //  In a real application you'd use a proper WebSocket library to handle this.
    char buffer[1024];
    int bytes_received = recv(client_sockfd, buffer, sizeof(buffer), 0);
    if (bytes_received < 0) handle_error("Could not receive handshake");
    //  ... (WebSocket handshake processing would go here) ...

    //Simple echo loop.
    while (true) {
        bytes_received = recv(client_sockfd, buffer, sizeof(buffer), 0);
        if (bytes_received <= 0) break; // Connection closed

        //Send the received data back to the client.
        if (send(client_sockfd, buffer, bytes_received, 0) < 0)
            handle_error("Could not send data");
    }


    close(client_sockfd);
    std::cout << "Client disconnected." << std::endl;
    return 0;
}
```

To compile and run this code:

1.  **Install wslay:**  You'll need to install the wslay library.  The installation method depends on your system (e.g., `apt-get install libwslay-dev` on Debian/Ubuntu, `brew install wslay` on macOS with Homebrew).
2.  **Compile:** `g++ -Wall -o websocket_chat websocket_chat.cpp -lwslay`
3.  **Run:** `./websocket_chat`

Then connect to `ws://localhost:8080` with a WebSocket client (like a browser's developer tools or a dedicated WebSocket client).  Remember that this is a drastically simplified example and lacks robust error handling, security measures, and a proper WebSocket handshake implementation.  It's only intended as a minimal demonstration.  For production, use a more mature WebSocket library with complete handshake handling and proper error management.
*/

/*
This client uses the `wslay` library as well, mirroring the server's simplicity.  It's equally minimal and lacks robust error handling and full handshake processing.  Remember that this is for demonstration purposes only;  a production client would require much more comprehensive error handling and features.


```cpp
#include <iostream>
#include <string>
#include <unistd.h> // for close
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <wslay/wslay.h>


void handle_error(const std::string& msg) {
    std::cerr << "Error: " << msg << std::endl;
    exit(1);
}

int main() {
    int sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd < 0) handle_error("Could not create socket");

    sockaddr_in serv_addr;
    memset(&serv_addr, 0, sizeof(serv_addr));
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_addr.s_addr = inet_addr("127.0.0.1"); // Connect to localhost
    serv_addr.sin_port = htons(8080);

    if (connect(sockfd, (sockaddr*)&serv_addr, sizeof(serv_addr)) < 0)
        handle_error("Could not connect to server");

    //Simplified WebSocket handshake (missing crucial parts)
    //In a real application, you'd use a proper WebSocket library to handle this.
    //For now we'll just send a dummy handshake.  This will likely fail with a real server.
    std::string handshake = "GET / HTTP/1.1\r\n"
                            "Host: localhost:8080\r\n"
                            "Upgrade: websocket\r\n"
                            "Connection: Upgrade\r\n"
                            "Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==\r\n" // Replace with a proper key
                            "\r\n";
    send(sockfd, handshake.c_str(), handshake.length(), 0);


    char buffer[1024];
    std::string message;
    while (true) {
        std::cout << "Enter message (or type 'quit' to exit): ";
        std::getline(std::cin, message);
        if (message == "quit") break;

        send(sockfd, message.c_str(), message.length(), 0);

        int bytes_received = recv(sockfd, buffer, sizeof(buffer), 0);
        if (bytes_received <= 0) break; //Connection closed
        buffer[bytes_received] = '\0'; //Null-terminate the received data
        std::cout << "Received: " << buffer << std::endl;
    }

    close(sockfd);
    return 0;
}
```

**To compile and run:**

1.  Make sure you have `wslay` installed (same as the server).
2.  Compile: `g++ -Wall -o websocket_client websocket_client.cpp -lwslay`
3.  Run: `./websocket_client`

**Important Considerations:**

*   **Incomplete Handshake:** Both the client and server drastically simplify the WebSocket handshake.  A real implementation needs to follow the WebSocket protocol precisely, including key generation, acceptance, and security considerations.
*   **Error Handling:**  The error handling is rudimentary.  A production-ready client needs far more robust error checking and handling.
*   **No Framing:**  The code doesn't handle WebSocket framing (masking, length encoding, etc.).  This is a critical part of the WebSocket protocol.
*   **Security:** The example lacks any security measures (like TLS/SSL).  Never use this code in a production environment without proper security.

This improved client, like the server, is still a minimal example, but it provides a more complete (though still very basic) illustration of how to interact with a WebSocket server using `wslay`.  For anything beyond simple testing, use a mature, well-tested WebSocket library.
 */

/*
The previous examples, while demonstrating basic socket communication, did *not* actually use the `wslay` library for WebSocket handling.  They only used sockets for a rudimentary connection and message passing.  `wslay` handles the complexities of the WebSocket protocol (framing, handshake, etc.), which was entirely missing from the previous code.  Using `wslay` correctly requires a significant rewrite.

Creating a multi-client server with `wslay` that's still relatively simple is challenging. `wslay` itself is not designed for concurrent handling of multiple clients; it's a low-level library.  To manage multiple clients concurrently, you need to incorporate an event loop or multithreading.  Below, I'll provide a basic example using threads.  This is still simplified and lacks robust error handling and some features a production server would need.

**Server (Multi-Client, Threaded, using wslay - Simplified):**

```cpp
#include <iostream>
#include <string>
#include <thread>
#include <vector>
#include <unistd.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <wslay/wslay.h>

// Error handling (still minimal)
void handle_error(const std::string& msg) {
    std::cerr << "Error: " << msg << std::endl;
    exit(1);
}

//Simplified Echo Handler for a single client connection
void handle_client(int client_sockfd) {
  //This is a VERY simplified example.  Real-world usage requires significantly more error handling and proper WebSocket handling with wslay.

    char buffer[1024];
    while (true) {
        int bytes_received = recv(client_sockfd, buffer, sizeof(buffer), 0);
        if (bytes_received <= 0) break; // Connection closed

        if (send(client_sockfd, buffer, bytes_received, 0) < 0) {
            handle_error("Could not send data");
        }
    }
    close(client_sockfd);
    std::cout << "Client disconnected." << std::endl;
}


int main() {
    int sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd < 0) handle_error("Could not create socket");

    sockaddr_in serv_addr;
    memset(&serv_addr, 0, sizeof(serv_addr));
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_addr.s_addr = INADDR_ANY;
    serv_addr.sin_port = htons(8080);

    if (bind(sockfd, (sockaddr*)&serv_addr, sizeof(serv_addr)) < 0)
        handle_error("Could not bind socket");

    if (listen(sockfd, 10) < 0) handle_error("Could not listen on socket");


    std::vector<std::thread> clients;
    while (true) {
        sockaddr_in client_addr;
        socklen_t client_len = sizeof(client_addr);
        int client_sockfd = accept(sockfd, (sockaddr*)&client_addr, &client_len);
        if (client_sockfd < 0) {
            std::cerr << "Error accepting connection" << std::endl; //Don't exit on accept error
            continue;
        }
        clients.emplace_back(handle_client, client_sockfd);
    }

    //This will never be reached in this simplified example.  In a real app you'd need to manage client threads gracefully.
    for (auto& t : clients) {
        t.join();
    }

    close(sockfd);
    return 0;
}
```

**Client (remains largely unchanged - still lacks proper wslay integration):**

The client code from before is still largely appropriate, but *it doesn't use `wslay`*.  Integrating `wslay` into the client would require substantial changes to properly handle the WebSocket handshake and framing. This would make the example significantly more complex.


**Crucial Missing Parts:**

*   **Proper WebSocket Handshake with `wslay`:** The server and client are still missing the proper WebSocket handshake using the `wslay` functions.  This is a *critical* component for WebSocket communication.
*   **WebSocket Framing with `wslay`:**  The code doesn't handle WebSocket framing (masking, opcodes, length encoding) which `wslay` is designed to manage.
*   **Robust Error Handling:** The error handling remains very minimal.  A production server needs far more comprehensive error checks and handling.
*   **Thread Management:** The server's thread management is extremely basic.  In a real application, you need mechanisms to gracefully handle client disconnections and thread cleanup.
*   **Security (TLS/SSL):**  The example lacks any security, which is crucial for any production-level WebSocket server.


This multi-client example provides a *very high-level* sketch of how you could structure a multi-client server.  Using `wslay` effectively for a production-ready WebSocket server requires a much deeper understanding of the library and the WebSocket protocol.  For production, consider using a higher-level WebSocket library that handles the complexities for you.  This example is mainly for illustrative purposes to show the basic threading structure.  Do not deploy this in a production environment.
 */
